# This file is distributed under the same license as the Podman package.
# Translators:
# Takuya Nishimura <tanishim@redhat.com>, 2023.
msgid ""
msgstr ""
"Project-Id-Version: Podman \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-29 22:22+0900\n"
"PO-Revision-Date: 2023-08-29 22:22+0900\n"
"Last-Translator: Takuya Nishimura <tanishim@redhat.com>\n"
"Language: ja\n"
"Language-Team: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/Introduction.rst:4
msgid "Introduction"
msgstr "はじめに"

#: ../../source/Introduction.rst:5
msgid ""
"Containers_ simplify the production, distribution, discoverability, and "
"usage of applications with all of their dependencies and default "
"configuration files. Users test drive or deploy a new application with "
"one or two commands instead of following pages of installation "
"instructions. Here's how to find your first `Container Image`_::"
msgstr ""

#: ../../source/Introduction.rst:9 ../../source/Introduction.rst:23
#: ../../source/Introduction.rst:46 ../../source/Introduction.rst:73
#: ../../source/Introduction.rst:89
msgid "Output::"
msgstr ""

#: ../../source/Introduction.rst:17
msgid ""
"The previous command returned a list of publicly available container "
"images on DockerHub. These container images are easy to consume, but of "
"differing levels of quality and maintenance. Let’s use the first one "
"listed because it seems to be well maintained."
msgstr ""

#: ../../source/Introduction.rst:19
msgid "To run the busybox container image, it’s just a single command::"
msgstr ""

#: ../../source/Introduction.rst:27
msgid ""
"You can poke around in the busybox container for a while, but you’ll "
"quickly find that running small container with a few Linux utilities in "
"it provides limited value, so exit out::"
msgstr ""

#: ../../source/Introduction.rst:31
msgid ""
"There’s an old saying that “nobody runs an operating system just to run "
"an operating system” and the same is true with containers. It’s the "
"workload running on top of an operating system or in a container that’s "
"interesting and valuable."
msgstr ""

#: ../../source/Introduction.rst:33
msgid ""
"Sometimes we can find a publicly available container image for the exact "
"workload we’re looking for and it will already be packaged exactly how we"
" want. But, more often than not, there’s something that we want to add, "
"remove, or customize. It can be as simple as a configuration setting for "
"security or performance, or as complex as adding a complex workload. "
"Either way, containers make it fairly easy to make the changes we need."
msgstr ""

#: ../../source/Introduction.rst:35
msgid ""
"Container Images aren’t actually images, they’re repositories often made "
"up of multiple layers. These layers can easily be added, saved, and "
"shared with others by using a Containerfile (Dockerfile). This single "
"file often contains all the instructions needed to build a new container "
"image and can easily be shared with others publicly using tools like "
"GitHub."
msgstr ""

#: ../../source/Introduction.rst:37
msgid ""
"Here's an example of how to build a Nginx web server on top of a Debian "
"base image using the Dockerfile maintained by Nginx and published in "
"GitHub::"
msgstr ""

#: ../../source/Introduction.rst:41
msgid ""
"Once, the image build completes, it’s easy to run the new image from our "
"local cache::"
msgstr ""

#: ../../source/Introduction.rst:52
msgid ""
"Building new images is great, but sharing our work with others lets them "
"review our work, critique how we built them, and offer improved versions."
" Our newly built Nginx image can be published at quay.io or docker.io to "
"share it with the world. Everything needed to run the Nginx application "
"is provided in the container image. Others can easily pull it down and "
"use it, or make improvements to it."
msgstr ""

#: ../../source/Introduction.rst:54
msgid ""
"Standardizing on container images and `Container Registries`_ enable a "
"new level of collaboration through simple consumption. This simple "
"consumption model is possible because every major Container Engine and "
"Registry Server uses the Open Containers Initiative (OCI_) format. This "
"allows users to find, run, build, share and deploy containers anywhere "
"they want. Podman and other `Container Engines`_ like CRI-O, Docker, or "
"containerd can create and consume container images from docker.io, "
"quay.io, an on premise registry or even one provided by a cloud provider."
" The OCI image format facilitates this ecosystem through a single "
"standard."
msgstr ""

#: ../../source/Introduction.rst:56
msgid ""
"For example, if we wanted to share our newly built Nginx container image "
"on quay.io it’s easy. First log in to quay::"
msgstr ""

#: ../../source/Introduction.rst:59
msgid "Input::"
msgstr ""

#: ../../source/Introduction.rst:65
msgid "Next, tag the image so that we can push it into our user account::"
msgstr ""

#: ../../source/Introduction.rst:69
msgid "Finally, push the image::"
msgstr ""

#: ../../source/Introduction.rst:85
msgid ""
"Notice that we pushed four layers to our registry and now it’s available "
"for others to share. Take a quick look::"
msgstr ""

#: ../../source/Introduction.rst:99
msgid ""
"To summarize, Podman makes it easy to find, run, build and share "
"containers."
msgstr ""

#: ../../source/Introduction.rst:101
msgid ""
"Find: whether finding a container on dockerhub.io or quay.io, an internal"
" registry server, or directly from a vendor, a couple of `podman "
"search`_, and `podman pull`_ commands make it easy"
msgstr ""

#: ../../source/Introduction.rst:102
msgid ""
"Run: it's easy to consume pre-built images with everything needed to run "
"an entire application, or start from a Linux distribution base image with"
" the `podman run`_ command"
msgstr ""

#: ../../source/Introduction.rst:103
msgid ""
"Build: creating new layers with small tweaks, or major overhauls is easy "
"with `podman build`_"
msgstr ""

#: ../../source/Introduction.rst:104
msgid ""
"Share: Podman lets you push your newly built containers anywhere you want"
" with a single `podman push`_ command"
msgstr ""

#: ../../source/Introduction.rst:106
msgid ""
"For more instructions on use cases, take a look at our :doc:`Tutorials` "
"page."
msgstr ""
